import { app, BrowserWindow, protocol } from "electron";
import {
  Yolov8Detection,
  Yolov8Segmentation,
} from "./computer-vision/models/yolo";
import * as fs from "fs";
import { v4 as uuidv4 } from "uuid";
import path from "path";
import { ipcMain } from "../ipc-impl";
import { GenericComputerVisionModel } from "./computer-vision/models";
import { ECVModelType, ValueOf } from "../types";
import { YoloV8Importer } from "./computer-vision/importers/yolov8";
import { CocoSegmentationImporter } from "./computer-vision/importers/coco";
import { FilesImporter } from "./computer-vision/importers/files";
import { ComputerVisionExporter } from "./computer-vision/exporters";
import { ComputerVisionImporter } from "./computer-vision/importers";
import { getProjectsPath } from "./utils";
import { createOrOpenProject, DatabaseAnnotation, DatabaseSample } from "./db";

const IMPORTERS: ComputerVisionImporter[] = [
  new YoloV8Importer(),
  new CocoSegmentationImporter(),
  new FilesImporter(),
];

const EXPORTERS: ComputerVisionExporter[] = [];

let detector: GenericComputerVisionModel | undefined = undefined;
let detectorModelPath = "";

const POSSIBLE_DETECTORS: Record<
  ValueOf<typeof ECVModelType>,
  {
    id: ValueOf<typeof ECVModelType>;
    name: string;
    create: (modelPath: string) => Promise<GenericComputerVisionModel>;
  }
> = {
  [ECVModelType.Yolov8Detect]: {
    id: ECVModelType.Yolov8Detect,
    name: "Yolov8 Detection",
    create: (...args) => Yolov8Detection.create(...args),
  },
  [ECVModelType.Yolov8Seg]: {
    id: ECVModelType.Yolov8Seg,
    name: "Yolo8 Segmentation",
    create: (...args) => Yolov8Segmentation.create(...args),
  },
};

protocol.registerSchemesAsPrivileged([
  {
    scheme: "app",
    privileges: {
      standard: true,
      secure: true,
      supportFetchAPI: true,
    },
  },
]);

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
// eslint-disable-next-line @typescript-eslint/no-unused-vars
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// ipcMain.handle("getPreloadPath", () => MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY);
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const PROJECTS_URI_REGEX = /app:[/]+projects\/([\d\w]+)\/([\d\w/]+)/

const createWindow = async () => {
  protocol.handle("app", async (req) => {

    if (PROJECTS_URI_REGEX.test(req.url)) {
      console.log("URI",req.url.match(PROJECTS_URI_REGEX))

      const [projectId,accessPath] = req.url.match(PROJECTS_URI_REGEX)?.slice(1) ?? ["",""]

      const itemPath = path.resolve(path.normalize(path.join(getProjectsPath(),projectId, accessPath))); 

      console.log("ITem Path",itemPath)
      return new Response(
        await fs.promises.readFile(itemPath),
        {}
      );

    }

    return new Response(undefined, {
      status: 404,
    });
  });

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegrationInWorker: true,
    },
    autoHideMenuBar: true,
  });

  mainWindow.setMenu(null);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(createWindow);
// app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", async () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
}); //https://github.com/TareHimself/manga-translator/raw/master/assets/examples/solo_leveling.png

ipcMain.handle("doInference", async (_modelType, imagePath) => {
  if (!detector) {
    console.error("Inference was attempted with no model");
    return undefined;
  }

  try {
    return await detector.predict(path.normalize(path.join(getProjectsPath(),imagePath)));
  } catch (error) {
    console.error(error);
    return undefined;
  }
});

ipcMain.handle("loadModel", async (modelType, modelPath) => {
  try {
    if (detector?.modelType !== modelType || detectorModelPath !== modelPath) {
      detector?.cleanup();
      detectorModelPath = modelPath;
      detector = await POSSIBLE_DETECTORS[modelType].create(modelPath);
    }
    return true;
  } catch (error) {
    console.error(error);
    return false;
  }
});

// eslint-disable-next-line @typescript-eslint/no-unused-vars
ipcMain.handle("importSamples", async (projectId, importerId) => {
  return (
    (await IMPORTERS.find((a) => a.id === importerId)?.importIntoProject(
      projectId
    )) ?? []
  );
});

ipcMain.handle("unloadModel", async () => {
  try {
    if (detector) {
      const oldDetector = detector;
      detector = undefined;
      await oldDetector.cleanup();
      return true;
    }
  } catch (error) {
    console.error(error);
  }

  return false;
});

ipcMain.handle("getImporters", async () => {
  return IMPORTERS.map((a) => ({
    id: a.id,
    displayName: a.name,
  }));
});

ipcMain.handle("getExporters", async () => {
  return EXPORTERS.map((a) => ({
    id: a.id,
    displayName: a.name,
  }));
});

ipcMain.handle("getSupportedModels", async () => {
  return Object.values(POSSIBLE_DETECTORS).map((a) => ({
    id: a.id as unknown as string,
    displayName: a.name,
  }));
});

// eslint-disable-next-line @typescript-eslint/no-unused-vars
ipcMain.handle("createProject", async (_name) => {
  const projectId = uuidv4().replace(/-/g, "");
  const projectPath = path.join(getProjectsPath(), projectId)
  await fs.promises.mkdir(projectPath, {
    recursive: true,
  });

  await createOrOpenProject(projectPath)

  return projectId;
});

ipcMain.handle("getSample", async (sampleId) => {
  const sampleData = await DatabaseSample.findByPk(sampleId).then(c => c?.get({ plain: true }))
  if (sampleData === undefined) {
    return undefined
  }

  return {
    id: sampleData.id,
    annotations: [],
    createdAt: sampleData.createdAt
  }
})

ipcMain.handle("getSampleIds", async () => {
  return await DatabaseSample.findAll({
    attributes : ['id'],
    order: [['createdAt','DESC']]
  }).then(c => c.map(d => d.get('id')))
})

ipcMain.handle("activateProject", async (projectId) => {
  const projectPath = path.join(getProjectsPath(), projectId)
  await createOrOpenProject(projectPath)
  return true
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
