import createLogger from '@root/logger';
createLogger('main');
import { app, BrowserWindow, protocol } from "electron";
import * as fs from "fs";
import path from "path";
import '@node-rs/xxhash'
import { mainToIo, mainToModels, mainToRenderer } from "../ipc-impl";
import { getProjectsPath, isDev } from '@root/utils';
import { IEventBase, IpcMainTyped } from '@root/ipc';


// eslint-disable-next-line @typescript-eslint/no-var-requires
require('@electron/remote/main').initialize()

let modelsWindow: BrowserWindow | undefined = undefined;
let ioWindow: BrowserWindow | undefined = undefined;

protocol.registerSchemesAsPrivileged([
  {
    scheme: "app",
    privileges: {
      standard: true,
      secure: true,
      supportFetchAPI: true,
    },
  },
]);

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
// eslint-disable-next-line @typescript-eslint/no-unused-vars
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
declare const MODELS_WINDOW_WEBPACK_ENTRY: string;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
declare const MODELS_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
declare const IO_WINDOW_WEBPACK_ENTRY: string;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
declare const IO_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// ipcMain.handle("getPreloadPath", () => MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY);
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const PROJECTS_URI_REGEX = /app:[/]+projects\/([\d\w]+)\/([\d\w/]+)/

const createWindow = async () => {
  protocol.handle("app", async (req) => {

    if (PROJECTS_URI_REGEX.test(req.url)) {

      const [projectId, accessPath] = req.url.match(PROJECTS_URI_REGEX)?.slice(1) ?? ["", ""]

      const itemPath = path.resolve(path.normalize(path.join(getProjectsPath(), projectId, accessPath)));

      return new Response(
        await fs.promises.readFile(itemPath),
        {}
      );

    }

    return new Response(undefined, {
      status: 404,
    });
  });

  modelsWindow = new BrowserWindow({
    show: false ?? isDev(),
    webPreferences: {
      preload: MODELS_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegrationInWorker: true,
      nodeIntegration: true,
      contextIsolation: false,
    },
    autoHideMenuBar: true,
  });

  // eslint-disable-next-line @typescript-eslint/no-var-requires
  require("@electron/remote/main").enable(modelsWindow.webContents)


  ioWindow = new BrowserWindow({
    show: false ?? isDev(),
    webPreferences: {
      preload: IO_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegrationInWorker: true,
      nodeIntegration: true,
      contextIsolation: false,
    },
    autoHideMenuBar: true,
  });

  // eslint-disable-next-line @typescript-eslint/no-var-requires
  require("@electron/remote/main").enable(ioWindow.webContents)

  await Promise.all([modelsWindow.loadURL(MODELS_WINDOW_WEBPACK_ENTRY),ioWindow.loadURL(IO_WINDOW_WEBPACK_ENTRY)])

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegrationInWorker: true,
      nodeIntegration: true,
      contextIsolation: false
    },
    // autoHideMenuBar: true,
  });

  // eslint-disable-next-line @typescript-eslint/no-var-requires
  require("@electron/remote/main").enable(mainWindow.webContents)

  mainWindow.setMenu(null);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.on('closed',() => {
    modelsWindow?.close()
    app.quit()
  })

  if(isDev()){

    ioWindow.webContents.openDevTools({
      mode: 'detach'
    });

    modelsWindow.webContents.openDevTools({
      mode: 'detach'
    });

      // Open the DevTools.
    mainWindow.webContents.openDevTools({
      mode: 'detach'
    });
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(createWindow);
// app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", async () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
}); //https://github.com/TareHimself/manga-translator/raw/master/assets/examples/solo_leveling.png

// Io Window
// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
mainToRenderer.handle("importSamples", (...args) => mainToIo.sendAsync(ioWindow!,"importSamples",...args));

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
mainToRenderer.handle("getImporters", (...args) => mainToIo.sendAsync(ioWindow!,"getImporters",...args));

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
mainToRenderer.handle("getExporters", (...args) => mainToIo.sendAsync(ioWindow!,"getExporters",...args));

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
mainToRenderer.handle("getSample", (...args) => mainToIo.sendAsync(ioWindow!,"getSample",...args));

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
mainToRenderer.handle("getSampleIds", (...args) => mainToIo.sendAsync(ioWindow!,"getSampleIds",...args));

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
mainToRenderer.handle("createProject", (...args) => mainToIo.sendAsync(ioWindow!,"createProject",...args));

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
mainToRenderer.handle("activateProject", (...args) => mainToIo.sendAsync(ioWindow!,"activateProject",...args));

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
mainToRenderer.handle("createAnnotations", (...args) => mainToIo.sendAsync(ioWindow!,"createAnnotations",...args));

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
mainToRenderer.handle("removeAnnotations", (...args) => mainToIo.sendAsync(ioWindow!,"removeAnnotations",...args));

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
mainToRenderer.handle("createPoints", (...args) => mainToIo.sendAsync(ioWindow!,"createPoints",...args));

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
mainToRenderer.handle("updatePoints", (...args) => mainToIo.sendAsync(ioWindow!,"updatePoints",...args));

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
mainToRenderer.handle("removePoints", (...args) => mainToIo.sendAsync(ioWindow!,"removePoints",...args));



mainToRenderer.handle("saveImage", async (data) => {
  try {
    await fs.promises.writeFile("collision.png", data.replace(/^data:image\/png;base64,/, ""), 'base64')
    return true;
  } catch (error) {
    return false;
  }
})

// Models Window

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
mainToRenderer.handle("doInference", (...args) => mainToModels.sendAsync(modelsWindow!, "doInference", ...args))

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
mainToRenderer.handle("getSupportedModels", (...args) => mainToModels.sendAsync(modelsWindow!, "getSupportedModels", ...args))

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
mainToRenderer.handle("loadModel", (...args) => mainToModels.sendAsync(modelsWindow!, "loadModel", ...args))

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
mainToRenderer.handle("selectModel", (...args) => mainToModels.sendAsync(modelsWindow!, "selectModel", ...args))

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
mainToRenderer.handle("unloadModel", (...args) => mainToModels.sendAsync(modelsWindow!, "unloadModel", ...args))

// selectModel: (...args) => ipcRenderer.sendAsync("selectModel", ...args),
//   loadModel: (...args) => ipcRenderer.sendAsync("loadModel", ...args),
//   doInference: (...args) => ipcRenderer.sendAsync("doInference", ...args),
//   unloadModel: (...args) => ipcRenderer.sendAsync("unloadModel", ...args),
//   getModel: (...args) => ipcRenderer.sendSync("getModel", ...args),
//   getSupportedModels: (...args) => ipcRenderer.sendAsync("getSupportedModels", ...args),




// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
